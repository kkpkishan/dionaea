AWSTemplateFormatVersion: 2010-09-09
Description: Provides  distributed Wazuh installation 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - MyVPC
      - MyPrivateSubnet01
      - MyPrivateSubnet02
    - Label:
        default: 'Elasticsearch Parameters'
      Parameters:
      - IPBlock
      - ElasticsearchUsername
      - ElasticsearchPassword
Parameters:
  MyVPC:
    Description: "VPC to deception"
    Type: AWS::EC2::VPC::Id
  MyPrivateSubnet01:
    Description: "The ID of Private Subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)"
    Type: AWS::EC2::Subnet::Id
  MyPrivateSubnet02:
    Description: "The ID of the Private Subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)"
    Type: AWS::EC2::Subnet::Id
  IPBlock:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP  of the form x.x.x.x/x.
    Default: 172.31.1.15/32
    Description: The IP address  Elasticsearch.
    MaxLength: '18'
    MinLength: '9'
    Type: String
  ElasticsearchPassword:
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The  ElasticsearchPassword admin account password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  ElasticsearchUsername:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: The  ElasticsearchUsername admin account username
    MaxLength: '16'
    MinLength: '1'
    Type: String
Resources:  
  # RDPY SecurityGroup
  rdpySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDPY security group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rdpySecurityGroup'
  # Dionaea SecurityGroup    
  DionaeaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Dionaea security group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 21
          ToPort: 21
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 42
          ToPort: 42
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 69
          ToPort: 69
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1723
          ToPort: 1723
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1883
          ToPort: 1883
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1883
          ToPort: 1883
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 1900
          ToPort: 1900
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5060
          ToPort: 5060
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 5060
          ToPort: 5060
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5061
          ToPort: 5061
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DionaeaSecurityGroup'
  # deception FARGATE
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [Deception, Cluster]]
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 0
          Base: 0
        - CapacityProvider: FARGATE_SPOT
          Base: 1
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  DionaeaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, Dionaea, TaskDefinition]]
  RDPYLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, rdpy, TaskDefinition]]
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: DionaeaLogGroup
    Properties:
      Family: !Join ['', [Dionaea, TaskDefinition]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: Dionaea
          Image: kkpkishan/dionaea:v1
          PortMappings:
            - ContainerPort: 21
              Protocol: tcp
            - ContainerPort: 42 
              Protocol: tcp
            - ContainerPort: 69
              Protocol: udp
            - ContainerPort: 80
              Protocol: tcp
            - ContainerPort: 135
              Protocol: tcp
            - ContainerPort: 443
              Protocol: tcp
            - ContainerPort: 445
              Protocol: tcp
            - ContainerPort: 1433
              Protocol: tcp
            - ContainerPort: 1723
              Protocol: tcp
            - ContainerPort: 1883
              Protocol: tcp
            - ContainerPort: 1900
              Protocol: udp
            - ContainerPort: 3306
              Protocol: tcp
            - ContainerPort: 5060
              Protocol: tcp
            - ContainerPort: 5060
              Protocol: udp
            - ContainerPort: 11211
              Protocol: tcp
          Environment:
            - Name: ip
              Value: 10.0.1.101
            - Name: user
              Value: admin
            - Name: password
              Value: admin
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref DionaeaLogGroup
              awslogs-stream-prefix: ecs
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [Dionaea, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # A role for the containers  
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [Dionaea, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
  rdpyTaskDefinition:
    Type: AWS::ECS::TaskDefinition

    DependsOn: RDPYLogGroup
    Properties:
      Family: !Join ['', [rdpy, rdpyTaskDefinition]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2GB
      ExecutionRoleArn: !Ref rdpyExecutionRole
      TaskRoleArn: !Ref rdpyTaskRole
      ContainerDefinitions:
        - Name: rdpy
          Image: kkpkishan/rdpy:v1
          PortMappings:
            - ContainerPort: 3389
              Protocol: tcp
          Environment:
            - Name: ip
              Value: !Ref IPBlock
            - Name: user
              Value: !Ref ElasticsearchUsername
            - Name: password
              Value: !Ref ElasticsearchPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref RDPYLogGroup
              awslogs-stream-prefix: ecs
  rdpyExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [rdpy, rdpyExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  rdpyTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [rdpy, rdpyTaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'  
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    Properties: 
      ServiceName: Dionaea
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref MyPrivateSubnet01
            - !Ref MyPrivateSubnet02
          SecurityGroups:
            - !Ref DionaeaSecurityGroup
  rdpyService:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    Properties: 
      ServiceName: rdpy
      Cluster: !Ref Cluster
      TaskDefinition: !Ref rdpyTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref MyPrivateSubnet01
            - !Ref MyPrivateSubnet02
          SecurityGroups:
            - !Ref rdpySecurityGroup
